// <auto-generated />
using System;
using BookingService.Infrastructure.Configuration;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace BookingService.Infrastructure.Migrations
{
    [DbContext(typeof(BookingDbContext))]
    [Migration("20241018074159_Updated_ticket_table")]
    partial class Updated_ticket_table
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("BookingService.Domain.Entities.Coupon", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<Guid>("DiscountTypeId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("DiscountValue")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsPersonalized")
                        .HasColumnType("boolean");

                    b.Property<int>("MaxUses")
                        .HasColumnType("integer");

                    b.Property<int>("UsedCount")
                        .HasColumnType("integer");

                    b.Property<DateTime>("ValidUntil")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("DiscountTypeId");

                    b.ToTable("Coupons", (string)null);
                });

            modelBuilder.Entity("BookingService.Domain.Entities.DiscountType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("DiscountTypes", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("a7420df9-eeed-47f0-b9d0-9c6363cd5cce"),
                            IsDeleted = false,
                            Name = "Percentage"
                        },
                        new
                        {
                            Id = new Guid("194deab4-5950-4670-99c8-5d9f345f4ffc"),
                            IsDeleted = false,
                            Name = "Quantitative"
                        });
                });

            modelBuilder.Entity("BookingService.Domain.Entities.SeatType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<decimal>("PriceMultiplier")
                        .HasPrecision(5, 2)
                        .HasColumnType("numeric(5,2)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("SeatTypes", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("d8234193-2772-49af-afea-18e675bb2e44"),
                            IsDeleted = false,
                            Name = "Standard",
                            PriceMultiplier = 1.0m
                        },
                        new
                        {
                            Id = new Guid("5d0993e0-e7c4-4c71-a8b2-55e9f26644c8"),
                            IsDeleted = false,
                            Name = "Comfort",
                            PriceMultiplier = 1.4m
                        },
                        new
                        {
                            Id = new Guid("37061534-0058-44a0-998d-6828a7921c3b"),
                            IsDeleted = false,
                            Name = "Business",
                            PriceMultiplier = 2.0m
                        });
                });

            modelBuilder.Entity("BookingService.Domain.Entities.Ticket", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CouponId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<decimal>("Price")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.Property<Guid>("SeatTypeId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("StatusId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TripId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CouponId");

                    b.HasIndex("SeatTypeId");

                    b.HasIndex("StatusId");

                    b.HasIndex("TripId");

                    b.HasIndex("UserId", "TripId");

                    b.ToTable("Tickets", (string)null);
                });

            modelBuilder.Entity("BookingService.Domain.Entities.TicketStatus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("TicketStatuses", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("1518e9d5-7a01-40ee-87ab-a23efbeb8c81"),
                            IsDeleted = false,
                            Name = "Booked"
                        },
                        new
                        {
                            Id = new Guid("c92c0847-87e0-45fe-8ec8-c04a4edbe4aa"),
                            IsDeleted = false,
                            Name = "Cancelled"
                        },
                        new
                        {
                            Id = new Guid("9368f0b7-9486-4f82-8cbc-b06aa70cc688"),
                            IsDeleted = false,
                            Name = "Completed"
                        });
                });

            modelBuilder.Entity("BookingService.Domain.Entities.Trip", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ArrivalCity")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("ArrivalTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("BasePrice")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.Property<string>("DepartureCity")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("DepartureTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<Guid>("TypeId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("TypeId");

                    b.HasIndex("DepartureCity", "ArrivalCity", "DepartureTime");

                    b.ToTable("Trips", (string)null);
                });

            modelBuilder.Entity("BookingService.Domain.Entities.TripSeatAvailability", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<Guid>("SeatTypeId")
                        .HasColumnType("uuid");

                    b.Property<int>("SeatsAvailable")
                        .HasColumnType("integer");

                    b.Property<Guid>("TripId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("SeatTypeId");

                    b.HasIndex("TripId", "SeatTypeId")
                        .IsUnique();

                    b.ToTable("TripSeatAvailabilities", (string)null);
                });

            modelBuilder.Entity("BookingService.Domain.Entities.TripType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("TripTypes", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("63bafa1d-c169-4238-9079-f1c531aa4e91"),
                            IsDeleted = false,
                            Name = "Airplane"
                        },
                        new
                        {
                            Id = new Guid("0634b2d0-4ef1-4ac8-936b-24c3e7f1e33d"),
                            IsDeleted = false,
                            Name = "Train"
                        });
                });

            modelBuilder.Entity("BookingService.Domain.Entities.UserCoupon", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CounponId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsUsed")
                        .HasColumnType("boolean");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CounponId");

                    b.HasIndex("UserId", "CounponId")
                        .IsUnique();

                    b.ToTable("UserCoupons", (string)null);
                });

            modelBuilder.Entity("BookingService.Domain.Entities.Coupon", b =>
                {
                    b.HasOne("BookingService.Domain.Entities.DiscountType", null)
                        .WithMany()
                        .HasForeignKey("DiscountTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BookingService.Domain.Entities.Ticket", b =>
                {
                    b.HasOne("BookingService.Domain.Entities.Coupon", null)
                        .WithMany()
                        .HasForeignKey("CouponId");

                    b.HasOne("BookingService.Domain.Entities.SeatType", null)
                        .WithMany()
                        .HasForeignKey("SeatTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BookingService.Domain.Entities.TicketStatus", null)
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BookingService.Domain.Entities.Trip", null)
                        .WithMany()
                        .HasForeignKey("TripId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BookingService.Domain.Entities.Trip", b =>
                {
                    b.HasOne("BookingService.Domain.Entities.TripType", null)
                        .WithMany()
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BookingService.Domain.Entities.TripSeatAvailability", b =>
                {
                    b.HasOne("BookingService.Domain.Entities.SeatType", null)
                        .WithMany()
                        .HasForeignKey("SeatTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BookingService.Domain.Entities.Trip", null)
                        .WithMany()
                        .HasForeignKey("TripId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BookingService.Domain.Entities.UserCoupon", b =>
                {
                    b.HasOne("BookingService.Domain.Entities.Coupon", null)
                        .WithMany()
                        .HasForeignKey("CounponId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
